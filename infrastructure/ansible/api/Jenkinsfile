#!/usr/bin/env groovy

properties(
  [
    // Make this a parameterized build.
    [$class: 'ParametersDefinitionProperty',
      parameterDefinitions: [
        [$class: 'hudson.model.StringParameterDefinition', defaultValue: "", description: 'application version to deploy', name : 'version'],
      ]
    ],
    [$class: 'ParametersDefinitionProperty',
      parameterDefinitions: [
        [$class: 'hudson.model.StringParameterDefinition', defaultValue: "", description: 'build version to deploy', name : 'build'],
      ]
    ],
      [$class: 'jenkins.model.BuildDiscarderProperty',
      strategy: [$class: 'LogRotator', numToKeepStr: '15', artifactNumToKeepStr: '15']
    ],
  ]
)

node('jenkins-slave') {

    stage('Checkout') {
      checkout scm
    }

    stage('Deploy') {
      // deploy latest pom version unless version specified. make sure to create build parameter called 'version' and that 'latest' is the default value.
      currentBuild.displayName = "${env.BUILD_NUMBER}:deploy:mario/gs-spring-boot-docker:${params.version}-${params.build}"
      // go into ansible directory
      dir ('./infrastructure/ansible/api') {
        // pull in ansible roles from github
        sh "ansible-galaxy install -r requirements.yml";
        // deploy via ansible
        switch(env.JOB_BASE_NAME) {
          case ~/^dev.*$/:
            ansiblePlaybook(
              playbook: 'deploy.yml',
              extraVars: [
                env: 'dev',
                ecs_type: "spot",
                container_build: "${params.build}",
                container_version: "${params.version}-${params.build}",
                container_cpu: "1024",
                container_mem: "1048",
                multi_az: "no",
                service_count: "3"
            ])
          break;
          default: 
            sh "echo \"nothing to build. make sure jenkins job name specifies environment. ex. dev-yourapp-deploy\""
            sh "exit 1"
        }
      }
    }
}
